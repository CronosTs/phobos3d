import PH_DiffuseLighting from PH_Shaders.program

     /*
material Base_128
{
	technique
	{
		pass
		{			
			texture_unit
			{
				texture base128.png
			}
		}

	}
}      */


material Base_128: PH_DiffuseLighting
{  
  set_texture_alias DiffuseMap base128.png
}

//material RTSS/PerPixel_MultiPass
material _Base_128
{	
	technique
	{
		// Base ambient pass
		pass ambient
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0 
			specular 0 0 0 0 
			
			// RT Shader system section.			
 			rtshader_system
 			{	
 				// Override dynamic light count with zero light count.
 				// Doing this will cause the RTSS to create 
 				// ambient lighting shaders.
 				// If not doing that the RTSS it will use the current scene light count
 				// which will result in full lighting calculation in this pass.
				light_count 0 0 0
			}
		}
		
		// Lighting pass.
		pass lighting
		{
			// Comment the specular in order to use only diffuse based normal map technique.
			specular 1.0 1.0 1.0 32
			
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			
			// do this for each point light
			// You MUST specify the light type when working with the RT Shader System in iterative lighting method. 
			// otherwise an exception will be thrown.
			iteration once_per_light point

			scene_blend add		
			
			// RT Shader system section.
 			rtshader_system
 			{	 	
 				// Override lighting stage with per pixel lighting. 			
 				lighting_stage per_pixel				
 			}				
		}	
		
		// Decal pass
		pass decal
		{		
			lighting off
			
			scene_blend dest_colour zero
			texture_unit diffusemap
			{
				texture base128.png
			}			
		}			
	}
}
